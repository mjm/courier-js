scalar Cursor
scalar DateTime

type Query {
  currentUser: User

  allSubscribedFeeds(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
  ): SubscribedFeedConnection!

  allTweets(
    filter: TweetFilter
    first: Int
    last: Int
    before: Cursor
    after: Cursor
  ): TweetConnection!

  allFeeds(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
  ): FeedConnection!

  feed(id: ID!): Feed
}

type Mutation {
  addFeed(feed: FeedInput!): SubscribedFeed!
  refreshFeed(id: ID!): Feed!
  deleteFeed(id: ID!): ID!

  cancelTweet(id: ID!): Tweet!
  uncancelTweet(id: ID!): Tweet!
  postTweet(id: ID!): Tweet!
}

type PageInfo {
  startCursor: Cursor
  endCursor: Cursor
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type User {
  name: String!
  nickname: String!
  picture: String!
}

type FeedConnection {
  edges: [FeedEdge!]!
  nodes: [Feed!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type FeedEdge {
  cursor: Cursor!
  node: Feed!
}

type Feed {
  id: ID!
  url: String!
  title: String!
  homePageURL: String!
  refreshedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!

  posts(first: Int, last: Int, before: Cursor, after: Cursor): PostConnection!
}

input FeedInput {
  url: String!
}

type PostConnection {
  edges: [PostEdge!]!
  nodes: [Post!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PostEdge {
  cursor: Cursor!
  node: Post!
}

type Post {
  id: ID!
  feed: Feed!
  itemId: String!
  url: String!
  title: String!
  textContent: String!
  htmlContent: String!
  publishedAt: DateTime
  modifiedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SubscribedFeed {
  id: ID!
  feed: Feed!
  autopost: Boolean!
}

type SubscribedFeedConnection {
  edges: [SubscribedFeedEdge!]!
  nodes: [SubscribedFeed!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SubscribedFeedEdge {
  cursor: Cursor!
  node: SubscribedFeed!
}

type Tweet {
  id: ID!
  feed: SubscribedFeed!
  post: Post!
  body: String!
  mediaURLs: [String!]!
  status: TweetStatus!
  postedAt: DateTime
  postedTweetID: String
}

enum TweetStatus {
  DRAFT
  CANCELED
  POSTED
}

enum TweetFilter {
  UPCOMING
  PAST
}

type TweetConnection {
  edges: [TweetEdge!]!
  nodes: [Tweet!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TweetEdge {
  cursor: Cursor!
  node: Tweet!
}
