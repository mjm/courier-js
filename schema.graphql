scalar Cursor
scalar DateTime

type Query {
  currentUser: User

  allSubscribedFeeds(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
  ): SubscribedFeedConnection!

  subscribedFeed(id: ID!): SubscribedFeed

  allTweets(
    filter: TweetFilter
    first: Int
    last: Int
    before: Cursor
    after: Cursor
  ): TweetConnection!

  allEvents(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
  ): EventConnection!
}

type Mutation {
  addFeed(input: AddFeedInput!): AddFeedPayload!
  refreshFeed(input: RefreshFeedInput!): RefreshFeedPayload!
  setFeedOptions(input: SetFeedOptionsInput!): SetFeedOptionsPayload!
  deleteFeed(input: DeleteFeedInput!): DeleteFeedPayload!

  cancelTweet(input: CancelTweetInput!): CancelTweetPayload!
  uncancelTweet(input: UncancelTweetInput!): UncancelTweetPayload!
  postTweet(input: PostTweetInput!): PostTweetPayload!
  editTweet(input: EditTweetInput!): EditTweetPayload!
}

type PageInfo {
  startCursor: Cursor
  endCursor: Cursor
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type User {
  name: String!
  nickname: String!
  picture: String!
}

type FeedConnection {
  edges: [FeedEdge!]!
  nodes: [Feed!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type FeedEdge {
  cursor: Cursor!
  node: Feed!
}

type Feed {
  id: ID!
  url: String!
  title: String!
  homePageURL: String!
  refreshedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!

  posts(first: Int, last: Int, before: Cursor, after: Cursor): PostConnection!
}

input AddFeedInput {
  url: String!
}

type AddFeedPayload {
  feed: SubscribedFeed!
}

input RefreshFeedInput {
  id: ID!
}

type RefreshFeedPayload {
  feed: Feed!
}

input SetFeedOptionsInput {
  id: ID!
  autopost: Boolean
}

type SetFeedOptionsPayload {
  feed: SubscribedFeed!
}

input DeleteFeedInput {
  id: ID!
}

type DeleteFeedPayload {
  id: ID!
}

type PostConnection {
  edges: [PostEdge!]!
  nodes: [Post!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PostEdge {
  cursor: Cursor!
  node: Post!
}

type Post {
  id: ID!
  feed: Feed!
  itemId: String!
  url: String!
  title: String!
  textContent: String!
  htmlContent: String!
  publishedAt: DateTime
  modifiedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SubscribedFeed {
  id: ID!
  feed: Feed!
  autopost: Boolean!
}

type SubscribedFeedConnection {
  edges: [SubscribedFeedEdge!]!
  nodes: [SubscribedFeed!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SubscribedFeedEdge {
  cursor: Cursor!
  node: SubscribedFeed!
}

type Tweet {
  id: ID!
  feed: SubscribedFeed!
  post: Post!
  body: String!
  mediaURLs: [String!]!
  status: TweetStatus!
  postAfter: DateTime
  postedAt: DateTime
  postedTweetID: String
}

enum TweetStatus {
  DRAFT
  CANCELED
  POSTED
}

enum TweetFilter {
  UPCOMING
  PAST
}

type TweetConnection {
  edges: [TweetEdge!]!
  nodes: [Tweet!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TweetEdge {
  cursor: Cursor!
  node: Tweet!
}

input CancelTweetInput {
  id: ID!
}

type CancelTweetPayload {
  tweet: Tweet!
}

input UncancelTweetInput {
  id: ID!
}

type UncancelTweetPayload {
  tweet: Tweet!
}

input PostTweetInput {
  id: ID!
  body: String
  mediaURLs: [String!]
}

type PostTweetPayload {
  tweet: Tweet!
}

input EditTweetInput {
  id: ID!
  body: String!
  mediaURLs: [String!]
}

type EditTweetPayload {
  tweet: Tweet!
}

type EventConnection {
  edges: [EventEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type EventEdge {
  cursor: Cursor!
  node: Event!
}

type Event {
  id: ID!
  eventType: EventType!
  createdAt: DateTime!

  feed: Feed
  tweet: Tweet
  boolValue: Boolean
}

enum EventType {
  FEED_REFRESH
  FEED_SET_AUTOPOST
  FEED_SUBSCRIBE
  FEED_UNSUBSCRIBE
  TWEET_CANCEL
  TWEET_UNCANCEL
  TWEET_EDIT
}
