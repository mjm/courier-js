scalar Cursor
scalar DateTime
scalar Time

type Query {
  viewer: Viewer

  node(id: ID!): Node

  feed(id: ID!): Feed

  tweetGroup(id: ID!): TweetGroup

  allEvents(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
  ): EventConnection!

  microformats(url: String!): MicroformatPage

  feedPreview(url: String!): FeedPreview
}

type Mutation {
  addFeed(input: AddFeedInput!): AddFeedPayload!
  refreshFeed(input: RefreshFeedInput!): RefreshFeedPayload!
  setFeedOptions(input: SetFeedOptionsInput!): SetFeedOptionsPayload!
  deleteFeed(input: DeleteFeedInput!): DeleteFeedPayload!

  cancelTweet(input: CancelTweetInput!): CancelTweetPayload!
  uncancelTweet(input: UncancelTweetInput!): UncancelTweetPayload!
  postTweet(input: PostTweetInput!): PostTweetPayload!
  editTweet(input: EditTweetInput!): EditTweetPayload!

  subscribe(input: SubscribeInput!): SubscribePayload!
  cancelSubscription(
    input: CancelSubscriptionInput!
  ): CancelSubscriptionPayload!

  completeIndieAuth(input: CompleteIndieAuthInput!): CompleteIndieAuthPayload!
}

interface Node {
  id: ID!
}

type PageInfo {
  startCursor: Cursor
  endCursor: Cursor
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type Viewer {
  name: String!
  nickname: String!
  picture: String!
  customer: Customer
  subscription: UserSubscription
  subscriptionStatusOverride: SubscriptionStatus
  micropubSites: [String!]!

  allTweets(
    filter: TweetFilter
    first: Int
    last: Int
    before: Cursor
    after: Cursor
  ): TweetGroupConnection!

  allFeeds(
    first: Int
    after: Cursor
  ): FeedConnection!
}

type Customer {
  emailAddress: String
  creditCard: CreditCard
}

type CreditCard {
  brand: String!
  lastFour: String!
  expirationMonth: Int!
  expirationYear: Int!
}

type UserSubscription {
  status: SubscriptionStatus!
  periodEnd: Time!
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  INACTIVE
}

type FeedConnection {
  edges: [FeedEdge!]!
  nodes: [Feed!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type FeedEdge {
  cursor: Cursor!
  node: Feed!
}

type Feed implements Node {
  id: ID!
  url: String!
  title: String!
  homePageURL: String!
  micropubEndpoint: String!
  refreshedAt: Time
  refreshing: Boolean!
  createdAt: Time!
  updatedAt: Time!
  autopost: Boolean!

  posts(first: Int, last: Int, before: Cursor, after: Cursor): PostConnection!
}

input AddFeedInput {
  url: String!
}

type AddFeedPayload {
  feed: Feed!
  feedEdge: FeedEdge!
}

input RefreshFeedInput {
  id: ID!
}

type RefreshFeedPayload {
  feed: Feed!
}

input SetFeedOptionsInput {
  id: ID!
  autopost: Boolean
}

type SetFeedOptionsPayload {
  feed: Feed!
}

input DeleteFeedInput {
  id: ID!
}

type DeleteFeedPayload {
  id: ID!
}

type PostConnection {
  edges: [PostEdge!]!
  nodes: [Post!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PostEdge {
  cursor: Cursor!
  node: Post!
}

type Post implements Node {
  id: ID!
  feed: Feed!
  itemId: String!
  url: String!
  title: String!
  textContent: String!
  htmlContent: String!
  publishedAt: Time
  modifiedAt: Time
  createdAt: Time!
  updatedAt: Time!
}

type TweetGroup implements Node & TweetContent {
  id: ID!
  feed: Feed!
  post: Post!
  action: TweetAction!
  retweetID: String!
  tweets: [Tweet!]!
  status: TweetStatus!
  postAfter: Time
  postedAt: Time
  postedRetweetID: String
}

type Tweet {
  body: String!
  mediaURLs: [String!]!
  postedTweetID: String
}

enum TweetAction {
  TWEET
  RETWEET
}

enum TweetStatus {
  DRAFT
  CANCELED
  POSTED
}

enum TweetFilter {
  UPCOMING
  PAST
}

type TweetGroupConnection {
  edges: [TweetGroupEdge!]!
  nodes: [TweetGroup!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TweetGroupEdge {
  cursor: Cursor!
  node: TweetGroup!
}

input CancelTweetInput {
  id: ID!
}

type CancelTweetPayload {
  tweetGroup: TweetGroup!
}

input UncancelTweetInput {
  id: ID!
}

type UncancelTweetPayload {
  tweetGroup: TweetGroup!
}

input PostTweetInput {
  id: ID!
  body: String
  mediaURLs: [String!]
}

type PostTweetPayload {
  tweetGroup: TweetGroup!
}

input EditTweetInput {
  id: ID!
  tweets: [TweetEdit!]!
}

input TweetEdit {
  body: String!
  mediaURLs: [String!]
}

type EditTweetPayload {
  tweetGroup: TweetGroup!
}

input SubscribeInput {
  paymentMethodID: ID
  email: String
}

type SubscribePayload {
  user: Viewer!
}

input CancelSubscriptionInput {
  placeholder: String
}

type CancelSubscriptionPayload {
  user: Viewer!
}

input CompleteIndieAuthInput {
  code: String!
  state: String!
  data: String!
}

type CompleteIndieAuthPayload {
  origin: String!
}

type EventConnection {
  edges: [EventEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type EventEdge {
  cursor: Cursor!
  node: Event!
}

type Event implements Node {
  id: ID!
  eventType: EventType!
  createdAt: Time!

  feed: Feed
  tweetGroup: TweetGroup
  boolValue: Boolean
}

enum EventType {
  FEED_REFRESH
  FEED_SET_AUTOPOST
  FEED_SUBSCRIBE
  FEED_UNSUBSCRIBE
  TWEET_CANCEL
  TWEET_UNCANCEL
  TWEET_EDIT
  TWEET_POST
  TWEET_AUTOPOST
  SUBSCRIPTION_CREATE
  SUBSCRIPTION_RENEW
  SUBSCRIPTION_CANCEL
  SUBSCRIPTION_REACTIVATE
  SUBSCRIPTION_EXPIRE
}

type MicroformatPage {
  authorizationEndpoint: String
  tokenEndpoint: String
}

type FeedPreview {
  url: String!
  title: String!
  homePageURL: String!

  tweets: [TweetPreview!]!
}

type TweetPreview implements TweetContent {
  action: TweetAction!
  retweetID: String!
  tweets: [Tweet!]!
}

interface TweetContent {
  action: TweetAction!
  retweetID: String!
  tweets: [Tweet!]!
}
