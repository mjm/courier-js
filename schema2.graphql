scalar Cursor
scalar DateTime
scalar Time

type Query {
  # currentUser: User
  viewer: User

  node(id: ID!): Node

  allSubscribedFeeds(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
  ): SubscribedFeedConnection!

  subscribedFeed(id: ID!): SubscribedFeed

  # allTweets(
  #   filter: TweetFilter
  #   first: Int
  #   last: Int
  #   before: Cursor
  #   after: Cursor
  # ): TweetConnection!

  tweet(id: ID!): Tweet

  allEvents(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
  ): EventConnection!

  # microformats(url: String!): MicroformatPage

  # feedPreview(url: String!): FeedPreview
}

type Mutation {
  addFeed(input: AddFeedInput!): AddFeedPayload!
  #   refreshFeed(input: RefreshFeedInput!): RefreshFeedPayload!
  #   setFeedOptions(input: SetFeedOptionsInput!): SetFeedOptionsPayload!
  #   deleteFeed(input: DeleteFeedInput!): DeleteFeedPayload!

  cancelTweet(input: CancelTweetInput!): CancelTweetPayload!
  #   uncancelTweet(input: UncancelTweetInput!): UncancelTweetPayload!
  #   postTweet(input: PostTweetInput!): PostTweetPayload!
  #   editTweet(input: EditTweetInput!): EditTweetPayload!

  #   subscribe(input: SubscribeInput!): SubscribePayload!
  #   cancelSubscription(
  #     input: CancelSubscriptionInput!
  #   ): CancelSubscriptionPayload!

  #   addDevice(input: AddDeviceInput!): AddDevicePayload!
  #   sendTestNotification(
  #     input: SendTestNotificationInput!
  #   ): SendTestNotificationPayload!
}

interface Node {
  id: ID!
}

type PageInfo {
  startCursor: Cursor
  endCursor: Cursor
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type User {
  name: String!
  nickname: String!
  picture: String!
  customer: Customer
  subscription: UserSubscription
  # subscriptionStatusOverride: SubscriptionStatus
  # micropubSites: [String!]!

  allTweets(
    filter: TweetFilter
    first: Int
    last: Int
    before: Cursor
    after: Cursor
  ): TweetConnection!
}

type Customer {
  emailAddress: String
  creditCard: CreditCard
}

type CreditCard {
  brand: String!
  lastFour: String!
  expirationMonth: Int!
  expirationYear: Int!
}

type UserSubscription {
  status: SubscriptionStatus!
  periodEnd: Time!
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  INACTIVE
}

type FeedConnection {
  edges: [FeedEdge!]!
  nodes: [Feed!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type FeedEdge {
  cursor: Cursor!
  node: Feed!
}

type Feed implements Node {
  id: ID!
  url: String!
  title: String!
  homePageURL: String!
  micropubEndpoint: String!
  refreshedAt: Time
  createdAt: Time!
  updatedAt: Time!

  # posts(first: Int, last: Int, before: Cursor, after: Cursor): PostConnection!
}

input AddFeedInput {
  url: String!
}

type AddFeedPayload {
  feed: SubscribedFeed!
  feedEdge: SubscribedFeedEdge!
}

input RefreshFeedInput {
  id: ID!
}

type RefreshFeedPayload {
  feed: Feed!
}

input SetFeedOptionsInput {
  id: ID!
  autopost: Boolean
}

type SetFeedOptionsPayload {
  feed: SubscribedFeed!
}

input DeleteFeedInput {
  id: ID!
}

type DeleteFeedPayload {
  id: ID!
}

type PostConnection {
  edges: [PostEdge!]!
  nodes: [Post!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PostEdge {
  cursor: Cursor!
  node: Post!
}

type Post implements Node {
  id: ID!
  feed: Feed!
  itemId: String!
  url: String!
  title: String!
  textContent: String!
  htmlContent: String!
  publishedAt: Time
  modifiedAt: Time
  createdAt: Time!
  updatedAt: Time!
}

type SubscribedFeed implements Node {
  id: ID!
  feed: Feed!
  autopost: Boolean!
}

type SubscribedFeedConnection {
  edges: [SubscribedFeedEdge!]!
  nodes: [SubscribedFeed!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SubscribedFeedEdge {
  cursor: Cursor!
  node: SubscribedFeed!
}

type Tweet implements Node & TweetContent {
  id: ID!
  feed: SubscribedFeed!
  post: Post!
  action: TweetAction!
  body: String!
  mediaURLs: [String!]!
  retweetID: String!
  status: TweetStatus!
  postAfter: Time
  postedAt: Time
  postedTweetID: String
}

enum TweetAction {
  TWEET
  RETWEET
}

enum TweetStatus {
  DRAFT
  CANCELED
  POSTED
}

enum TweetFilter {
  UPCOMING
  PAST
}

type TweetConnection {
  edges: [TweetEdge!]!
  nodes: [Tweet!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TweetEdge {
  cursor: Cursor!
  node: Tweet!
}

input CancelTweetInput {
  id: ID!
}

type CancelTweetPayload {
  tweet: Tweet!
}

input UncancelTweetInput {
  id: ID!
}

type UncancelTweetPayload {
  tweet: Tweet!
}

input PostTweetInput {
  id: ID!
  body: String
  mediaURLs: [String!]
}

type PostTweetPayload {
  tweet: Tweet!
}

input EditTweetInput {
  id: ID!
  body: String!
  mediaURLs: [String!]
}

type EditTweetPayload {
  tweet: Tweet!
}

input SubscribeInput {
  tokenID: ID
  email: String
}

type SubscribePayload {
  user: User!
}

input CancelSubscriptionInput {
  placeholder: String
}

type CancelSubscriptionPayload {
  user: User!
}

type EventConnection {
  edges: [EventEdge!]!
  nodes: [Event!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type EventEdge {
  cursor: Cursor!
  node: Event!
}

type Event implements Node {
  id: ID!
  eventType: EventType!
  createdAt: Time!

  feed: Feed
  tweet: Tweet
  boolValue: Boolean
}

enum EventType {
  FEED_REFRESH
  FEED_SET_AUTOPOST
  FEED_SUBSCRIBE
  FEED_UNSUBSCRIBE
  TWEET_CANCEL
  TWEET_UNCANCEL
  TWEET_EDIT
  TWEET_POST
  TWEET_AUTOPOST
  SUBSCRIPTION_CREATE
  SUBSCRIPTION_RENEW
  SUBSCRIPTION_CANCEL
  SUBSCRIPTION_REACTIVATE
  SUBSCRIPTION_EXPIRE
}

type MicroformatPage {
  authorizationEndpoint: String
  tokenEndpoint: String
}

# type DeviceToken implements Node {
type DeviceToken {
  id: ID!
  token: String!
}

enum NotificationEnvironment {
  PRODUCTION
  SANDBOX
}

input AddDeviceInput {
  token: String!
  environment: NotificationEnvironment
}

type AddDevicePayload {
  deviceToken: DeviceToken!
}

enum TestNotificationType {
  IMPORTED
  POSTED
}

input SendTestNotificationInput {
  tweetId: ID!
  type: TestNotificationType
}

type SendTestNotificationPayload {
  placeholder: String
}

type FeedPreview {
  url: String!
  title: String!
  homePageURL: String!

  tweets: [TweetPreview!]!
}

type TweetPreview implements TweetContent {
  action: TweetAction!
  body: String!
  mediaURLs: [String!]!
  retweetID: String!
}

interface TweetContent {
  action: TweetAction!
  body: String!
  mediaURLs: [String!]!
  retweetID: String!
}
