// Auto-generated by relay-compiler. Do not edit.

import Relay

public struct RefreshFeedMutation {
    public var variables: Variables

    public init(variables: Variables) {
        self.variables = variables
    }

    public static var node: ConcreteRequest {
        ConcreteRequest(
            fragment: ReaderFragment(
                name: "RefreshFeedMutation",
                type: "Mutation",
                selections: [
                    .field(ReaderLinkedField(
                        name: "refreshFeed",
                        args: [
                            VariableArgument(name: "input", variableName: "input")
                        ],
                        concreteType: "RefreshFeedPayload",
                        plural: false,
                        selections: [
                            .field(ReaderLinkedField(
                                name: "feed",
                                concreteType: "Feed",
                                plural: false,
                                selections: [
                                    .field(ReaderScalarField(
                                        name: "id"
                                    )),
                                    .field(ReaderScalarField(
                                        name: "refreshing"
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]
            ),
            operation: NormalizationOperation(
                name: "RefreshFeedMutation",
                selections: [
                    .field(NormalizationLinkedField(
                        name: "refreshFeed",
                        args: [
                            VariableArgument(name: "input", variableName: "input")
                        ],
                        concreteType: "RefreshFeedPayload",
                        plural: false,
                        selections: [
                            .field(NormalizationLinkedField(
                                name: "feed",
                                concreteType: "Feed",
                                plural: false,
                                selections: [
                                    .field(NormalizationScalarField(
                                        name: "id"
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "refreshing"
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]
            ),
            params: RequestParameters(
                name: "RefreshFeedMutation",
                operationKind: .mutation,
                text: """
mutation RefreshFeedMutation(
  $input: RefreshFeedInput!
) {
  refreshFeed(input: $input) {
    feed {
      id
      refreshing
    }
  }
}
"""
            )
        )
    }
}

extension RefreshFeedMutation {
    public struct Variables: VariableDataConvertible {
        public var input: RefreshFeedInput

        public init(input: RefreshFeedInput) {
            self.input = input
        }

        public var variableData: VariableData {
            [
                "input": input
            ]
        }
    }

    public init(input: RefreshFeedInput) {
        self.init(variables: .init(input: input))
    }
}

#if swift(>=5.3) && canImport(RelaySwiftUI)
import RelaySwiftUI

@available(iOS 14.0, macOS 10.16, tvOS 14.0, watchOS 7.0, *)
extension RelaySwiftUI.QueryNext.WrappedValue where O == RefreshFeedMutation {
    public func get(input: RefreshFeedInput, fetchKey: Any? = nil) -> RelaySwiftUI.QueryNext<RefreshFeedMutation>.Result {
        self.get(.init(input: input), fetchKey: fetchKey)
    }
}
#endif

#if swift(>=5.3) && canImport(RelaySwiftUI)
import RelaySwiftUI

@available(iOS 14.0, macOS 10.16, tvOS 14.0, watchOS 7.0, *)
extension RelaySwiftUI.RefetchableFragment.Wrapper where F.Operation == RefreshFeedMutation {
    public func refetch(input: RefreshFeedInput) {
        self.refetch(.init(input: input))
    }
}
#endif

public struct RefreshFeedInput: VariableDataConvertible {
    public var id: String

    public init(id: String) {
        self.id = id
    }

    public var variableData: VariableData {
        [
            "id": id
        ]
    }
}


extension RefreshFeedMutation {
    public struct Data: Decodable {
        public var refreshFeed: RefreshFeedPayload_refreshFeed

        public struct RefreshFeedPayload_refreshFeed: Decodable {
            public var feed: Feed_feed

            public struct Feed_feed: Decodable, Identifiable {
                public var id: String
                public var refreshing: Bool
            }
        }
    }
}

extension RefreshFeedMutation: Relay.Operation {}