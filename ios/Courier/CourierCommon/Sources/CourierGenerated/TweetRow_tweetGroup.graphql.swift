// Auto-generated by relay-compiler. Do not edit.

import Relay

public struct TweetRow_tweetGroup {
    public var fragmentPointer: FragmentPointer

    public init(key: TweetRow_tweetGroup_Key) {
        fragmentPointer = key.fragment_TweetRow_tweetGroup
    }

    public static var node: ReaderFragment {
        ReaderFragment(
            name: "TweetRow_tweetGroup",
            type: "TweetContent",
            selections: [
                .field(ReaderLinkedField(
                    name: "tweets",
                    concreteType: "Tweet",
                    plural: true,
                    selections: [
                        .field(ReaderScalarField(
                            name: "body"
                        )),
                        .field(ReaderScalarField(
                            name: "mediaURLs"
                        ))
                    ]
                )),
                .inlineFragment(ReaderInlineFragment(
                    type: "TweetGroup",
                    selections: [
                        .field(ReaderScalarField(
                            name: "id"
                        )),
                        .field(ReaderScalarField(
                            name: "status"
                        )),
                        .field(ReaderScalarField(
                            name: "postedAt"
                        )),
                        .field(ReaderScalarField(
                            name: "postAfter"
                        ))
                    ]
                ))
            ]
        )
    }
}

extension TweetRow_tweetGroup {
    public enum Data: Decodable {
        case tweetGroup(TweetGroup)
        case tweetContent(TweetContent)

        private enum TypeKeys: String, CodingKey {
            case __typename
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: TypeKeys.self)
            let typeName = try container.decode(String.self, forKey: .__typename)
            switch typeName {
            case "TweetGroup":
                self = .tweetGroup(try TweetGroup(from: decoder))
            default:
                self = .tweetContent(try TweetContent(from: decoder))
            }
        }

        public var asTweetGroup: TweetGroup? {
            if case .tweetGroup(let val) = self {
                return val
            }
            return nil
        }

        public var tweets: [Tweet_tweets] {
            switch self {
            case .tweetGroup(let val):
                return val.tweets
            case .tweetContent(let val):
                return val.tweets
            }
        }

        public struct Tweet_tweets: Decodable {
            public var body: String
            public var mediaURLs: [String]
        }

        public struct TweetGroup: Decodable, Identifiable {
            public var tweets: [Tweet_tweets]
            public var id: String
            public var status: TweetStatus
            public var postedAt: String?
            public var postAfter: String?
        }

        public struct TweetContent: Decodable {
            public var tweets: [Tweet_tweets]
        }
    }
}

public protocol TweetRow_tweetGroup_Key {
    var fragment_TweetRow_tweetGroup: FragmentPointer { get }
}

extension TweetRow_tweetGroup: Relay.Fragment {}

#if swift(>=5.3) && canImport(RelaySwiftUI)
import RelaySwiftUI

extension TweetRow_tweetGroup_Key {
    @available(iOS 14.0, macOS 10.16, tvOS 14.0, watchOS 7.0, *)
    public func asFragment() -> RelaySwiftUI.FragmentNext<TweetRow_tweetGroup> {
        RelaySwiftUI.FragmentNext<TweetRow_tweetGroup>(self)
    }
}
#endif