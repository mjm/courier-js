// Auto-generated by relay-compiler. Do not edit.

import Relay

public struct FeedsSection_feeds {
    public var fragmentPointer: FragmentPointer

    public init(key: FeedsSection_feeds_Key) {
        fragmentPointer = key.fragment_FeedsSection_feeds
    }

    public static var node: ReaderFragment {
        ReaderFragment(
            name: "FeedsSection_feeds",
            type: "Viewer",
            selections: [
                .field(ReaderLinkedField(
                    name: "__FeedsSection_allFeeds_connection",
                    alias: "allFeeds",
                    concreteType: "FeedConnection",
                    plural: false,
                    selections: [
                        .field(ReaderLinkedField(
                            name: "edges",
                            concreteType: "FeedEdge",
                            plural: true,
                            selections: [
                                .field(ReaderLinkedField(
                                    name: "node",
                                    concreteType: "Feed",
                                    plural: false,
                                    selections: [
                                        .field(ReaderScalarField(
                                            name: "id"
                                        )),
                                        .field(ReaderScalarField(
                                            name: "__typename"
                                        )),
                                        .fragmentSpread(ReaderFragmentSpread(
                                            name: "FeedRow_feed"
                                        ))
                                    ]
                                )),
                                .field(ReaderScalarField(
                                    name: "cursor"
                                ))
                            ]
                        )),
                        .field(ReaderLinkedField(
                            name: "pageInfo",
                            concreteType: "PageInfo",
                            plural: false,
                            selections: [
                                .field(ReaderScalarField(
                                    name: "endCursor"
                                )),
                                .field(ReaderScalarField(
                                    name: "hasNextPage"
                                ))
                            ]
                        ))
                    ]
                ))
            ]
        )
    }
}

extension FeedsSection_feeds {
    public struct Data: Decodable {
        public var allFeeds: FeedConnection_allFeeds

        public struct FeedConnection_allFeeds: Decodable, ConnectionCollection {
            public var edges: [FeedEdge_edges]

            public struct FeedEdge_edges: Decodable, ConnectionEdge {
                public var node: Feed_node

                public struct Feed_node: Decodable, Identifiable, FeedRow_feed_Key, ConnectionNode {
                    public var id: String
                    public var fragment_FeedRow_feed: FragmentPointer
                }
            }
        }
    }
}

public protocol FeedsSection_feeds_Key {
    var fragment_FeedsSection_feeds: FragmentPointer { get }
}

extension FeedsSection_feeds: Relay.Fragment {}

extension FeedsSection_feeds: Relay.PaginationFragment {
    public typealias Operation = FeedsSectionPaginationQuery
    public static var metadata: Metadata {
        RefetchMetadata(
            path: ["viewer"],
            operation: Operation.self,
            connection: ConnectionMetadata(
                path: ["allFeeds"],
                forward: ConnectionVariableConfig(count: "count", cursor: "cursor")
            )
        )
    }
}

#if canImport(RelaySwiftUI)
import RelaySwiftUI

extension FeedsSection_feeds_Key {
    public func asFragment() -> RelaySwiftUI.Fragment<FeedsSection_feeds> {
        RelaySwiftUI.Fragment<FeedsSection_feeds>(self)
    }

    public func asFragment() -> RelaySwiftUI.RefetchableFragment<FeedsSection_feeds> {
        RelaySwiftUI.RefetchableFragment<FeedsSection_feeds>(self)
    }

    public func asFragment() -> RelaySwiftUI.PaginationFragment<FeedsSection_feeds> {
        RelaySwiftUI.PaginationFragment<FeedsSection_feeds>(self)
    }
}
#endif