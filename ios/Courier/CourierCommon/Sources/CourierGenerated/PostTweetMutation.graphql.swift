// Auto-generated by relay-compiler. Do not edit.

import Relay

public struct PostTweetMutation {
    public var variables: Variables

    public init(variables: Variables) {
        self.variables = variables
    }

    public static var node: ConcreteRequest {
        ConcreteRequest(
            fragment: ReaderFragment(
                name: "PostTweetMutation",
                type: "Mutation",
                selections: [
                    .field(ReaderLinkedField(
                        name: "postTweet",
                        args: [
                            VariableArgument(name: "input", variableName: "input")
                        ],
                        concreteType: "PostTweetPayload",
                        plural: false,
                        selections: [
                            .field(ReaderLinkedField(
                                name: "tweetGroup",
                                concreteType: "TweetGroup",
                                plural: false,
                                selections: [
                                    .field(ReaderScalarField(
                                        name: "id"
                                    )),
                                    .field(ReaderLinkedField(
                                        name: "tweets",
                                        concreteType: "Tweet",
                                        plural: true,
                                        selections: [
                                            .field(ReaderScalarField(
                                                name: "body"
                                            )),
                                            .field(ReaderScalarField(
                                                name: "mediaURLs"
                                            )),
                                            .field(ReaderScalarField(
                                                name: "postedTweetID"
                                            ))
                                        ]
                                    )),
                                    .field(ReaderScalarField(
                                        name: "status"
                                    )),
                                    .field(ReaderScalarField(
                                        name: "postedAt"
                                    )),
                                    .field(ReaderScalarField(
                                        name: "postAfter"
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]
            ),
            operation: NormalizationOperation(
                name: "PostTweetMutation",
                selections: [
                    .field(NormalizationLinkedField(
                        name: "postTweet",
                        args: [
                            VariableArgument(name: "input", variableName: "input")
                        ],
                        concreteType: "PostTweetPayload",
                        plural: false,
                        selections: [
                            .field(NormalizationLinkedField(
                                name: "tweetGroup",
                                concreteType: "TweetGroup",
                                plural: false,
                                selections: [
                                    .field(NormalizationScalarField(
                                        name: "id"
                                    )),
                                    .field(NormalizationLinkedField(
                                        name: "tweets",
                                        concreteType: "Tweet",
                                        plural: true,
                                        selections: [
                                            .field(NormalizationScalarField(
                                                name: "body"
                                            )),
                                            .field(NormalizationScalarField(
                                                name: "mediaURLs"
                                            )),
                                            .field(NormalizationScalarField(
                                                name: "postedTweetID"
                                            ))
                                        ]
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "status"
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "postedAt"
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "postAfter"
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]
            ),
            params: RequestParameters(
                name: "PostTweetMutation",
                operationKind: .mutation,
                text: """
mutation PostTweetMutation(
  $input: PostTweetInput!
) {
  postTweet(input: $input) {
    tweetGroup {
      id
      tweets {
        body
        mediaURLs
        postedTweetID
      }
      status
      postedAt
      postAfter
    }
  }
}
"""
            )
        )
    }
}

extension PostTweetMutation {
    public struct Variables: VariableDataConvertible {
        public var input: PostTweetInput

        public init(input: PostTweetInput) {
            self.input = input
        }

        public var variableData: VariableData {
            [
                "input": input
            ]
        }
    }

    public init(input: PostTweetInput) {
        self.init(variables: .init(input: input))
    }
}

#if swift(>=5.3) && canImport(RelaySwiftUI)
import RelaySwiftUI

@available(iOS 14.0, macOS 10.16, tvOS 14.0, watchOS 7.0, *)
extension RelaySwiftUI.QueryNext.WrappedValue where O == PostTweetMutation {
    public func get(input: PostTweetInput, fetchKey: Any? = nil) -> RelaySwiftUI.QueryNext<PostTweetMutation>.Result {
        self.get(.init(input: input), fetchKey: fetchKey)
    }
}
#endif

#if swift(>=5.3) && canImport(RelaySwiftUI)
import RelaySwiftUI

@available(iOS 14.0, macOS 10.16, tvOS 14.0, watchOS 7.0, *)
extension RelaySwiftUI.RefetchableFragment.Wrapper where F.Operation == PostTweetMutation {
    public func refetch(input: PostTweetInput) {
        self.refetch(.init(input: input))
    }
}
#endif

public struct PostTweetInput: VariableDataConvertible {
    public var id: String
    public var body: String?
    public var mediaURLs: [String]?

    public init(id: String, body: String? = nil, mediaURLs: [String]? = nil) {
        self.id = id
        self.body = body
        self.mediaURLs = mediaURLs
    }

    public var variableData: VariableData {
        [
            "id": id,
            "body": body,
            "mediaURLs": mediaURLs
        ]
    }
}


extension PostTweetMutation {
    public struct Data: Decodable {
        public var postTweet: PostTweetPayload_postTweet

        public struct PostTweetPayload_postTweet: Decodable {
            public var tweetGroup: TweetGroup_tweetGroup

            public struct TweetGroup_tweetGroup: Decodable, Identifiable {
                public var id: String
                public var tweets: [Tweet_tweets]
                public var status: TweetStatus
                public var postedAt: String?
                public var postAfter: String?

                public struct Tweet_tweets: Decodable {
                    public var body: String
                    public var mediaURLs: [String]
                    public var postedTweetID: String?
                }
            }
        }
    }
}

extension PostTweetMutation: Relay.Operation {}