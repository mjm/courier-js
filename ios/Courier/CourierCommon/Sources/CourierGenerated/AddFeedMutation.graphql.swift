// Auto-generated by relay-compiler. Do not edit.

import Relay

public struct AddFeedMutation {
    public var variables: Variables

    public init(variables: Variables) {
        self.variables = variables
    }

    public static var node: ConcreteRequest {
        ConcreteRequest(
            fragment: ReaderFragment(
                name: "AddFeedMutation",
                type: "Mutation",
                selections: [
                    .field(ReaderLinkedField(
                        name: "addFeed",
                        args: [
                            VariableArgument(name: "input", variableName: "input")
                        ],
                        concreteType: "AddFeedPayload",
                        plural: false,
                        selections: [
                            .field(ReaderLinkedField(
                                name: "feedEdge",
                                concreteType: "FeedEdge",
                                plural: false,
                                selections: [
                                    .field(ReaderLinkedField(
                                        name: "node",
                                        concreteType: "Feed",
                                        plural: false,
                                        selections: [
                                            .fragmentSpread(ReaderFragmentSpread(
                                                name: "FeedRow_feed"
                                            ))
                                        ]
                                    )),
                                    .field(ReaderScalarField(
                                        name: "cursor"
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]
            ),
            operation: NormalizationOperation(
                name: "AddFeedMutation",
                selections: [
                    .field(NormalizationLinkedField(
                        name: "addFeed",
                        args: [
                            VariableArgument(name: "input", variableName: "input")
                        ],
                        concreteType: "AddFeedPayload",
                        plural: false,
                        selections: [
                            .field(NormalizationLinkedField(
                                name: "feedEdge",
                                concreteType: "FeedEdge",
                                plural: false,
                                selections: [
                                    .field(NormalizationLinkedField(
                                        name: "node",
                                        concreteType: "Feed",
                                        plural: false,
                                        selections: [
                                            .field(NormalizationScalarField(
                                                name: "id"
                                            )),
                                            .field(NormalizationScalarField(
                                                name: "title"
                                            )),
                                            .field(NormalizationScalarField(
                                                name: "homePageURL"
                                            )),
                                            .field(NormalizationScalarField(
                                                name: "refreshedAt"
                                            )),
                                            .field(NormalizationScalarField(
                                                name: "refreshing"
                                            )),
                                            .field(NormalizationScalarField(
                                                name: "autopost"
                                            ))
                                        ]
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "cursor"
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]
            ),
            params: RequestParameters(
                name: "AddFeedMutation",
                operationKind: .mutation,
                text: """
mutation AddFeedMutation(
  $input: AddFeedInput!
) {
  addFeed(input: $input) {
    feedEdge {
      node {
        ...FeedRow_feed
        id
      }
      cursor
    }
  }
}

fragment FeedRow_feed on Feed {
  id
  title
  homePageURL
  refreshedAt
  refreshing
  autopost
}
"""
            )
        )
    }
}

extension AddFeedMutation {
    public struct Variables: VariableDataConvertible {
        public var input: AddFeedInput

        public init(input: AddFeedInput) {
            self.input = input
        }

        public var variableData: VariableData {
            [
                "input": input
            ]
        }
    }

    public init(input: AddFeedInput) {
        self.init(variables: .init(input: input))
    }
}

#if canImport(RelaySwiftUI)
import RelaySwiftUI

extension RelaySwiftUI.Query.WrappedValue where O == AddFeedMutation {
    public func get(input: AddFeedInput, fetchKey: Any? = nil) -> RelaySwiftUI.Query<AddFeedMutation>.Result {
        self.get(.init(input: input), fetchKey: fetchKey)
    }
}
#endif

#if canImport(RelaySwiftUI)
import RelaySwiftUI

extension RelaySwiftUI.RefetchableFragment.Wrapper where F.Operation == AddFeedMutation {
    public func refetch(input: AddFeedInput) {
        self.refetch(.init(input: input))
    }
}
#endif

public struct AddFeedInput: VariableDataConvertible {
    public var url: String

    public init(url: String) {
        self.url = url
    }

    public var variableData: VariableData {
        [
            "url": url
        ]
    }
}


extension AddFeedMutation {
    public struct Data: Decodable {
        public var addFeed: AddFeedPayload_addFeed

        public struct AddFeedPayload_addFeed: Decodable {
            public var feedEdge: FeedEdge_feedEdge

            public struct FeedEdge_feedEdge: Decodable {
                public var node: Feed_node
                public var cursor: String

                public struct Feed_node: Decodable, FeedRow_feed_Key {
                    public var fragment_FeedRow_feed: FragmentPointer
                }
            }
        }
    }
}

extension AddFeedMutation: Relay.Operation {}