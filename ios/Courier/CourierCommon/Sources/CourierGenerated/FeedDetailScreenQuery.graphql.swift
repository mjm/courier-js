// Auto-generated by relay-compiler. Do not edit.

import Relay

public struct FeedDetailScreenQuery {
    public var variables: Variables

    public init(variables: Variables) {
        self.variables = variables
    }

    public static var node: ConcreteRequest {
        ConcreteRequest(
            fragment: ReaderFragment(
                name: "FeedDetailScreenQuery",
                type: "Query",
                selections: [
                    .field(ReaderLinkedField(
                        name: "feed",
                        args: [
                            VariableArgument(name: "id", variableName: "id")
                        ],
                        concreteType: "Feed",
                        plural: false,
                        selections: [
                            .field(ReaderScalarField(
                                name: "title"
                            )),
                            .fragmentSpread(ReaderFragmentSpread(
                                name: "FeedInfoSection_feed"
                            )),
                            .fragmentSpread(ReaderFragmentSpread(
                                name: "FeedPostsSection_posts"
                            ))
                        ]
                    ))
                ]
            ),
            operation: NormalizationOperation(
                name: "FeedDetailScreenQuery",
                selections: [
                    .field(NormalizationLinkedField(
                        name: "feed",
                        args: [
                            VariableArgument(name: "id", variableName: "id")
                        ],
                        concreteType: "Feed",
                        plural: false,
                        selections: [
                            .field(NormalizationScalarField(
                                name: "title"
                            )),
                            .field(NormalizationScalarField(
                                name: "id"
                            )),
                            .field(NormalizationScalarField(
                                name: "refreshedAt"
                            )),
                            .field(NormalizationScalarField(
                                name: "refreshing"
                            )),
                            .field(NormalizationScalarField(
                                name: "autopost"
                            )),
                            .field(NormalizationLinkedField(
                                name: "posts",
                                args: [
                                    LiteralArgument(name: "first", value: 10)
                                ],
                                storageKey: "posts(first:10)",
                                concreteType: "PostConnection",
                                plural: false,
                                selections: [
                                    .field(NormalizationLinkedField(
                                        name: "edges",
                                        concreteType: "PostEdge",
                                        plural: true,
                                        selections: [
                                            .field(NormalizationLinkedField(
                                                name: "node",
                                                concreteType: "Post",
                                                plural: false,
                                                selections: [
                                                    .field(NormalizationScalarField(
                                                        name: "id"
                                                    )),
                                                    .field(NormalizationScalarField(
                                                        name: "url"
                                                    )),
                                                    .field(NormalizationScalarField(
                                                        name: "title"
                                                    )),
                                                    .field(NormalizationScalarField(
                                                        name: "htmlContent"
                                                    )),
                                                    .field(NormalizationScalarField(
                                                        name: "publishedAt"
                                                    )),
                                                    .field(NormalizationScalarField(
                                                        name: "__typename"
                                                    ))
                                                ]
                                            )),
                                            .field(NormalizationScalarField(
                                                name: "cursor"
                                            ))
                                        ]
                                    )),
                                    .field(NormalizationLinkedField(
                                        name: "pageInfo",
                                        concreteType: "PageInfo",
                                        plural: false,
                                        selections: [
                                            .field(NormalizationScalarField(
                                                name: "endCursor"
                                            )),
                                            .field(NormalizationScalarField(
                                                name: "hasNextPage"
                                            ))
                                        ]
                                    ))
                                ]
                            )),
                            .handle(NormalizationHandle(
                                kind: .linked,
                                name: "posts",
                                args: [
                                    LiteralArgument(name: "first", value: 10)
                                ],
                                handle: "connection",
                                key: "FeedPostsSection_posts"
                            ))
                        ]
                    ))
                ]
            ),
            params: RequestParameters(
                name: "FeedDetailScreenQuery",
                operationKind: .query,
                text: """
query FeedDetailScreenQuery(
  $id: ID!
) {
  feed(id: $id) {
    title
    ...FeedInfoSection_feed
    ...FeedPostsSection_posts
    id
  }
}

fragment FeedInfoSection_feed on Feed {
  id
  refreshedAt
  refreshing
  autopost
}

fragment FeedPostRow_post on Post {
  id
  url
  title
  htmlContent
  publishedAt
}

fragment FeedPostsSection_posts on Feed {
  posts(first: 10) {
    edges {
      node {
        id
        ...FeedPostRow_post
        __typename
      }
      cursor
    }
    pageInfo {
      endCursor
      hasNextPage
    }
  }
  id
}
"""
            )
        )
    }
}

extension FeedDetailScreenQuery {
    public struct Variables: VariableDataConvertible {
        public var id: String

        public init(id: String) {
            self.id = id
        }

        public var variableData: VariableData {
            [
                "id": id
            ]
        }
    }

    public init(id: String) {
        self.init(variables: .init(id: id))
    }
}

#if swift(>=5.3) && canImport(RelaySwiftUI)
import RelaySwiftUI

@available(iOS 14.0, macOS 10.16, tvOS 14.0, watchOS 7.0, *)
extension RelaySwiftUI.QueryNext.WrappedValue where O == FeedDetailScreenQuery {
    public func get(id: String, fetchKey: Any? = nil) -> RelaySwiftUI.QueryNext<FeedDetailScreenQuery>.Result {
        self.get(.init(id: id), fetchKey: fetchKey)
    }
}
#endif

#if swift(>=5.3) && canImport(RelaySwiftUI)
import RelaySwiftUI

@available(iOS 14.0, macOS 10.16, tvOS 14.0, watchOS 7.0, *)
extension RelaySwiftUI.RefetchableFragment.Wrapper where F.Operation == FeedDetailScreenQuery {
    public func refetch(id: String) {
        self.refetch(.init(id: id))
    }
}
#endif

extension FeedDetailScreenQuery {
    public struct Data: Decodable {
        public var feed: Feed_feed?

        public struct Feed_feed: Decodable, FeedInfoSection_feed_Key, FeedPostsSection_posts_Key {
            public var title: String
            public var fragment_FeedInfoSection_feed: FragmentPointer
            public var fragment_FeedPostsSection_posts: FragmentPointer
        }
    }
}

extension FeedDetailScreenQuery: Relay.Operation {}