// Auto-generated by relay-compiler. Do not edit.

import Relay

public struct FeedRefreshedEventQuery {
    public var variables: Variables

    public init(variables: Variables) {
        self.variables = variables
    }

    public static var node: ConcreteRequest {
        ConcreteRequest(
            fragment: ReaderFragment(
                name: "FeedRefreshedEventQuery",
                type: "Query",
                selections: [
                    .field(ReaderLinkedField(
                        name: "feed",
                        args: [
                            VariableArgument(name: "id", variableName: "id")
                        ],
                        concreteType: "Feed",
                        plural: false,
                        selections: [
                            .field(ReaderScalarField(
                                name: "id"
                            )),
                            .field(ReaderScalarField(
                                name: "title"
                            )),
                            .field(ReaderScalarField(
                                name: "homePageURL"
                            )),
                            .field(ReaderScalarField(
                                name: "micropubEndpoint"
                            )),
                            .field(ReaderScalarField(
                                name: "refreshedAt"
                            )),
                            .field(ReaderScalarField(
                                name: "refreshing"
                            ))
                        ]
                    ))
                ]
            ),
            operation: NormalizationOperation(
                name: "FeedRefreshedEventQuery",
                selections: [
                    .field(NormalizationLinkedField(
                        name: "feed",
                        args: [
                            VariableArgument(name: "id", variableName: "id")
                        ],
                        concreteType: "Feed",
                        plural: false,
                        selections: [
                            .field(NormalizationScalarField(
                                name: "id"
                            )),
                            .field(NormalizationScalarField(
                                name: "title"
                            )),
                            .field(NormalizationScalarField(
                                name: "homePageURL"
                            )),
                            .field(NormalizationScalarField(
                                name: "micropubEndpoint"
                            )),
                            .field(NormalizationScalarField(
                                name: "refreshedAt"
                            )),
                            .field(NormalizationScalarField(
                                name: "refreshing"
                            ))
                        ]
                    ))
                ]
            ),
            params: RequestParameters(
                name: "FeedRefreshedEventQuery",
                operationKind: .query,
                text: """
query FeedRefreshedEventQuery(
  $id: ID!
) {
  feed(id: $id) {
    id
    title
    homePageURL
    micropubEndpoint
    refreshedAt
    refreshing
  }
}
"""
            )
        )
    }
}

extension FeedRefreshedEventQuery {
    public struct Variables: VariableDataConvertible {
        public var id: String

        public init(id: String) {
            self.id = id
        }

        public var variableData: VariableData {
            [
                "id": id
            ]
        }
    }

    public init(id: String) {
        self.init(variables: .init(id: id))
    }
}

#if canImport(RelaySwiftUI)
import RelaySwiftUI

extension RelaySwiftUI.Query.WrappedValue where O == FeedRefreshedEventQuery {
    public func get(id: String, fetchKey: Any? = nil) -> RelaySwiftUI.Query<FeedRefreshedEventQuery>.Result {
        self.get(.init(id: id), fetchKey: fetchKey)
    }
}
#endif

#if canImport(RelaySwiftUI)
import RelaySwiftUI

extension RelaySwiftUI.RefetchableFragment.Wrapper where F.Operation == FeedRefreshedEventQuery {
    public func refetch(id: String) {
        self.refetch(.init(id: id))
    }
}
#endif

extension FeedRefreshedEventQuery {
    public struct Data: Decodable {
        public var feed: Feed_feed?

        public struct Feed_feed: Decodable, Identifiable {
            public var id: String
            public var title: String
            public var homePageURL: String
            public var micropubEndpoint: String
            public var refreshedAt: String?
            public var refreshing: Bool
        }
    }
}

extension FeedRefreshedEventQuery: Relay.Operation {}