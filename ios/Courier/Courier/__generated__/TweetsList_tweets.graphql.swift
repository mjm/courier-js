// Auto-generated by relay-compiler. Do not edit.

import Relay

struct TweetsList_tweets {
    var fragmentPointer: FragmentPointer

    init(key: TweetsList_tweets_Key) {
        fragmentPointer = key.fragment_TweetsList_tweets
    }

    static var node: ReaderFragment {
        ReaderFragment(
            name: "TweetsList_tweets",
            type: "Viewer",
            selections: [
                .field(ReaderLinkedField(
                    name: "__TweetsList_allTweets_connection",
                    alias: "allTweets",
                    args: [
                        VariableArgument(name: "filter", variableName: "filter")
                    ],
                    concreteType: "TweetGroupConnection",
                    plural: false,
                    selections: [
                        .field(ReaderLinkedField(
                            name: "edges",
                            concreteType: "TweetGroupEdge",
                            plural: true,
                            selections: [
                                .field(ReaderLinkedField(
                                    name: "node",
                                    concreteType: "TweetGroup",
                                    plural: false,
                                    selections: [
                                        .field(ReaderScalarField(
                                            name: "id"
                                        )),
                                        .field(ReaderScalarField(
                                            name: "__typename"
                                        )),
                                        .fragmentSpread(ReaderFragmentSpread(
                                            name: "TweetRow_tweetGroup"
                                        ))
                                    ]
                                )),
                                .field(ReaderScalarField(
                                    name: "cursor"
                                ))
                            ]
                        )),
                        .field(ReaderLinkedField(
                            name: "pageInfo",
                            concreteType: "PageInfo",
                            plural: false,
                            selections: [
                                .field(ReaderScalarField(
                                    name: "endCursor"
                                )),
                                .field(ReaderScalarField(
                                    name: "hasNextPage"
                                ))
                            ]
                        ))
                    ]
                ))
            ])
    }
}


extension TweetsList_tweets {
    struct Data: Decodable {
        var allTweets: TweetGroupConnection_allTweets

        struct TweetGroupConnection_allTweets: Decodable {
            var edges: [TweetGroupEdge_edges]

            struct TweetGroupEdge_edges: Decodable {
                var node: TweetGroup_node

                struct TweetGroup_node: Decodable, TweetRow_tweetGroup_Key {
                    var id: String
                    var fragment_TweetRow_tweetGroup: FragmentPointer
                }
            }
        }
    }
}

protocol TweetsList_tweets_Key {
    var fragment_TweetsList_tweets: FragmentPointer { get }
}

extension TweetsList_tweets: Relay.Fragment {}

extension TweetsList_tweets: Relay.PaginationFragment {
    typealias Operation = TweetsListPaginationQuery

    static var metadata: Metadata {
        RefetchMetadata(
            path: ["viewer"],
            operation: Operation.self,
            connection: ConnectionMetadata(
                path: ["allTweets"],
                forward: ConnectionVariableConfig(count: "count", cursor: "cursor")))
    }
}
