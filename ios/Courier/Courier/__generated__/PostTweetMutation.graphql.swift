// Auto-generated by relay-compiler. Do not edit.

import Relay

struct PostTweetMutation {
    var variables: Variables

    init(variables: Variables) {
        self.variables = variables
    }

    static var node: ConcreteRequest {
        ConcreteRequest(
            fragment: ReaderFragment(
                name: "PostTweetMutation",
                type: "Mutation",
                selections: [
                    .field(ReaderLinkedField(
                        name: "postTweet",
                        args: [
                            VariableArgument(name: "input", variableName: "input")
                        ],
                        concreteType: "PostTweetPayload",
                        plural: false,
                        selections: [
                            .field(ReaderLinkedField(
                                name: "tweetGroup",
                                concreteType: "TweetGroup",
                                plural: false,
                                selections: [
                                    .field(ReaderScalarField(
                                        name: "id"
                                    )),
                                    .field(ReaderLinkedField(
                                        name: "tweets",
                                        concreteType: "Tweet",
                                        plural: true,
                                        selections: [
                                            .field(ReaderScalarField(
                                                name: "body"
                                            )),
                                            .field(ReaderScalarField(
                                                name: "mediaURLs"
                                            )),
                                            .field(ReaderScalarField(
                                                name: "postedTweetID"
                                            ))
                                        ]
                                    )),
                                    .field(ReaderScalarField(
                                        name: "status"
                                    )),
                                    .field(ReaderScalarField(
                                        name: "postedAt"
                                    )),
                                    .field(ReaderScalarField(
                                        name: "postAfter"
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]),
            operation: NormalizationOperation(
                name: "PostTweetMutation",
                selections: [
                    .field(NormalizationLinkedField(
                        name: "postTweet",
                        args: [
                            VariableArgument(name: "input", variableName: "input")
                        ],
                        concreteType: "PostTweetPayload",
                        plural: false,
                        selections: [
                            .field(NormalizationLinkedField(
                                name: "tweetGroup",
                                concreteType: "TweetGroup",
                                plural: false,
                                selections: [
                                    .field(NormalizationScalarField(
                                        name: "id"
                                    )),
                                    .field(NormalizationLinkedField(
                                        name: "tweets",
                                        concreteType: "Tweet",
                                        plural: true,
                                        selections: [
                                            .field(NormalizationScalarField(
                                                name: "body"
                                            )),
                                            .field(NormalizationScalarField(
                                                name: "mediaURLs"
                                            )),
                                            .field(NormalizationScalarField(
                                                name: "postedTweetID"
                                            ))
                                        ]
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "status"
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "postedAt"
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "postAfter"
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]),
            params: RequestParameters(
                name: "PostTweetMutation",
                operationKind: .mutation,
                text: """
mutation PostTweetMutation(
  $input: PostTweetInput!
) {
  postTweet(input: $input) {
    tweetGroup {
      id
      tweets {
        body
        mediaURLs
        postedTweetID
      }
      status
      postedAt
      postAfter
    }
  }
}
"""))
    }
}


extension PostTweetMutation {
    struct Variables: VariableDataConvertible {
        var input: PostTweetInput

        var variableData: VariableData {
            [
                "input": input,
            ]
        }
    }

    init(input: PostTweetInput) {
        self.init(variables: .init(input: input))
    }
}

#if swift(>=5.3) && canImport(RelaySwiftUI)

import RelaySwiftUI

@available(iOS 14.0, macOS 10.16, tvOS 14.0, watchOS 7.0, *)
extension RelaySwiftUI.QueryNext.WrappedValue where O == PostTweetMutation {
    func get(input: PostTweetInput, fetchKey: Any? = nil) -> RelaySwiftUI.QueryNext<PostTweetMutation>.Result {
        self.get(.init(input: input), fetchKey: fetchKey)
    }
}

#endif

struct PostTweetInput: VariableDataConvertible {
    var id: String
    var body: String?
    var mediaURLs: [String]?

    var variableData: VariableData {
        [
            "id": id,
            "body": body,
            "mediaURLs": mediaURLs,
        ]
    }
}

extension PostTweetMutation {
    struct Data: Decodable {
        var postTweet: PostTweetPayload_postTweet

        struct PostTweetPayload_postTweet: Decodable {
            var tweetGroup: TweetGroup_tweetGroup

            struct TweetGroup_tweetGroup: Decodable, Identifiable {
                var id: String
                var tweets: [Tweet_tweets]
                var status: TweetStatus
                var postedAt: String?
                var postAfter: String?

                struct Tweet_tweets: Decodable {
                    var body: String
                    var mediaURLs: [String]
                    var postedTweetID: String?
                }
            }
        }
    }
}

extension PostTweetMutation: Relay.Operation {}
