// Auto-generated by relay-compiler. Do not edit.

import Relay

struct TweetRowPreviewQuery {
    var variables: Variables

    init(variables: Variables) {
        self.variables = variables
    }

    static var node: ConcreteRequest {
        ConcreteRequest(
            fragment: ReaderFragment(
                name: "TweetRowPreviewQuery",
                type: "Query",
                selections: [
                    .field(ReaderLinkedField(
                        name: "tweetGroup",
                        alias: "draftTweet",
                        storageKey: "tweetGroup(id:\"draft_tweet_id\")",
                        args: [
                            LiteralArgument(name: "id", value: "draft_tweet_id")
                        ],
                        concreteType: "TweetGroup",
                        plural: false,
                        selections: [
                            .fragmentSpread(ReaderFragmentSpread(
                                name: "TweetRow_tweetGroup"
                            ))
                        ]
                    )),
                    .field(ReaderLinkedField(
                        name: "tweetGroup",
                        alias: "autopostingTweet",
                        storageKey: "tweetGroup(id:\"autoposting_tweet_id\")",
                        args: [
                            LiteralArgument(name: "id", value: "autoposting_tweet_id")
                        ],
                        concreteType: "TweetGroup",
                        plural: false,
                        selections: [
                            .fragmentSpread(ReaderFragmentSpread(
                                name: "TweetRow_tweetGroup"
                            ))
                        ]
                    )),
                    .field(ReaderLinkedField(
                        name: "tweetGroup",
                        alias: "canceledTweet",
                        storageKey: "tweetGroup(id:\"canceled_tweet_id\")",
                        args: [
                            LiteralArgument(name: "id", value: "canceled_tweet_id")
                        ],
                        concreteType: "TweetGroup",
                        plural: false,
                        selections: [
                            .fragmentSpread(ReaderFragmentSpread(
                                name: "TweetRow_tweetGroup"
                            ))
                        ]
                    )),
                    .field(ReaderLinkedField(
                        name: "tweetGroup",
                        alias: "postedTweet",
                        storageKey: "tweetGroup(id:\"posted_tweet_id\")",
                        args: [
                            LiteralArgument(name: "id", value: "posted_tweet_id")
                        ],
                        concreteType: "TweetGroup",
                        plural: false,
                        selections: [
                            .fragmentSpread(ReaderFragmentSpread(
                                name: "TweetRow_tweetGroup"
                            ))
                        ]
                    ))
                ]
            ),
            operation: NormalizationOperation(
                name: "TweetRowPreviewQuery",
                selections: [
                    .field(NormalizationLinkedField(
                        name: "tweetGroup",
                        alias: "draftTweet",
                        args: [
                            LiteralArgument(name: "id", value: "draft_tweet_id")
                        ],
                        storageKey: "tweetGroup(id:\"draft_tweet_id\")",
                        concreteType: "TweetGroup",
                        plural: false,
                        selections: [
                            .field(NormalizationScalarField(
                                name: "id"
                            )),
                            .field(NormalizationScalarField(
                                name: "status"
                            )),
                            .field(NormalizationScalarField(
                                name: "postedAt"
                            )),
                            .field(NormalizationScalarField(
                                name: "postAfter"
                            )),
                            .field(NormalizationLinkedField(
                                name: "tweets",
                                concreteType: "Tweet",
                                plural: true,
                                selections: [
                                    .field(NormalizationScalarField(
                                        name: "body"
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "mediaURLs"
                                    ))
                                ]
                            ))
                        ]
                    )),
                    .field(NormalizationLinkedField(
                        name: "tweetGroup",
                        alias: "autopostingTweet",
                        args: [
                            LiteralArgument(name: "id", value: "autoposting_tweet_id")
                        ],
                        storageKey: "tweetGroup(id:\"autoposting_tweet_id\")",
                        concreteType: "TweetGroup",
                        plural: false,
                        selections: [
                            .field(NormalizationScalarField(
                                name: "id"
                            )),
                            .field(NormalizationScalarField(
                                name: "status"
                            )),
                            .field(NormalizationScalarField(
                                name: "postedAt"
                            )),
                            .field(NormalizationScalarField(
                                name: "postAfter"
                            )),
                            .field(NormalizationLinkedField(
                                name: "tweets",
                                concreteType: "Tweet",
                                plural: true,
                                selections: [
                                    .field(NormalizationScalarField(
                                        name: "body"
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "mediaURLs"
                                    ))
                                ]
                            ))
                        ]
                    )),
                    .field(NormalizationLinkedField(
                        name: "tweetGroup",
                        alias: "canceledTweet",
                        args: [
                            LiteralArgument(name: "id", value: "canceled_tweet_id")
                        ],
                        storageKey: "tweetGroup(id:\"canceled_tweet_id\")",
                        concreteType: "TweetGroup",
                        plural: false,
                        selections: [
                            .field(NormalizationScalarField(
                                name: "id"
                            )),
                            .field(NormalizationScalarField(
                                name: "status"
                            )),
                            .field(NormalizationScalarField(
                                name: "postedAt"
                            )),
                            .field(NormalizationScalarField(
                                name: "postAfter"
                            )),
                            .field(NormalizationLinkedField(
                                name: "tweets",
                                concreteType: "Tweet",
                                plural: true,
                                selections: [
                                    .field(NormalizationScalarField(
                                        name: "body"
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "mediaURLs"
                                    ))
                                ]
                            ))
                        ]
                    )),
                    .field(NormalizationLinkedField(
                        name: "tweetGroup",
                        alias: "postedTweet",
                        args: [
                            LiteralArgument(name: "id", value: "posted_tweet_id")
                        ],
                        storageKey: "tweetGroup(id:\"posted_tweet_id\")",
                        concreteType: "TweetGroup",
                        plural: false,
                        selections: [
                            .field(NormalizationScalarField(
                                name: "id"
                            )),
                            .field(NormalizationScalarField(
                                name: "status"
                            )),
                            .field(NormalizationScalarField(
                                name: "postedAt"
                            )),
                            .field(NormalizationScalarField(
                                name: "postAfter"
                            )),
                            .field(NormalizationLinkedField(
                                name: "tweets",
                                concreteType: "Tweet",
                                plural: true,
                                selections: [
                                    .field(NormalizationScalarField(
                                        name: "body"
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "mediaURLs"
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]
            ),
            params: RequestParameters(
                name: "TweetRowPreviewQuery",
                operationKind: .query,
                text: """
query TweetRowPreviewQuery {
  draftTweet: tweetGroup(id: "draft_tweet_id") {
    ...TweetRow_tweetGroup
    id
  }
  autopostingTweet: tweetGroup(id: "autoposting_tweet_id") {
    ...TweetRow_tweetGroup
    id
  }
  canceledTweet: tweetGroup(id: "canceled_tweet_id") {
    ...TweetRow_tweetGroup
    id
  }
  postedTweet: tweetGroup(id: "posted_tweet_id") {
    ...TweetRow_tweetGroup
    id
  }
}

fragment TweetRow_tweetGroup on TweetGroup {
  id
  status
  postedAt
  postAfter
  tweets {
    body
    mediaURLs
  }
}
"""
            )
        )
    }
}

extension TweetRowPreviewQuery {
    typealias Variables = EmptyVariables
}


extension TweetRowPreviewQuery {
    struct Data: Decodable {
        var draftTweet: TweetGroup_draftTweet?
        var autopostingTweet: TweetGroup_autopostingTweet?
        var canceledTweet: TweetGroup_canceledTweet?
        var postedTweet: TweetGroup_postedTweet?

        struct TweetGroup_draftTweet: Decodable, TweetRow_tweetGroup_Key {
            var fragment_TweetRow_tweetGroup: FragmentPointer
        }

        struct TweetGroup_autopostingTweet: Decodable, TweetRow_tweetGroup_Key {
            var fragment_TweetRow_tweetGroup: FragmentPointer
        }

        struct TweetGroup_canceledTweet: Decodable, TweetRow_tweetGroup_Key {
            var fragment_TweetRow_tweetGroup: FragmentPointer
        }

        struct TweetGroup_postedTweet: Decodable, TweetRow_tweetGroup_Key {
            var fragment_TweetRow_tweetGroup: FragmentPointer
        }
    }
}

extension TweetRowPreviewQuery: Relay.Operation {}