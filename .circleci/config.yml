version: 2
jobs:
  deploy_frontend_staging:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - run:
          name: Install Now CLI
          command: sudo npm install -g --unsafe-perm now
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install NPM modules
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
#      - run:
#          name: Migrate database
#          command: env DATABASE_URL="$STAGING_DATABASE_URL" npx node-pg-migrate up
      - run:
          name: Update Auth0 configuration
          command: npm run auth:import:staging
      - run:
          name: Deploy to Now
          command: now --token $NOW_TOKEN --target production

  test_backend:
    docker:
      - image: circleci/golang:1.13-node
      - image: circleci/postgres:12-alpine
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: courier_test
    environment:
      TEST_RESULTS: /tmp/test-results
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - run:
          name: Install golang-migrate
          command: |
            curl -L https://github.com/golang-migrate/migrate/releases/download/v4.8.0/migrate.linux-amd64.tar.gz | tar xvz
            mv migrate.linux-amd64 /go/bin/migrate
      - run: go get github.com/jstemmer/go-junit-report
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run:
          name: Enable pgcrypto extension
          command: psql -c 'create extension pgcrypto;' courier_test
      - run:
          name: Migrate test database
          command: |
            /go/bin/migrate -database 'postgresql:///courier_test?sslmode=disable' -path migrations/ up
      - run:
          name: Run unit tests
          command: |
            trap "go-junit-report <${TEST_RESULTS}/go-test.out > ${TEST_RESULTS}/go-test-report.xml" EXIT
            go test -v ./... | tee ${TEST_RESULTS}/go-test.out

      - run: go build -v ./...

      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-outpu
      - store_test_results:
          path: /tmp/test-results

  deploy_prod:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - run:
          name: Install Now CLI
          command: sudo npm install -g --unsafe-perm now
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install NPM modules
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Migrate database
          command: env DATABASE_URL="$PROD_DATABASE_URL" npx node-pg-migrate up
      - run:
          name: Update Auth0 configuration
          command: npm run auth:import:prod
      - run:
          name: Deploy to Now
          command: now --token $NOW_TOKEN --target production -A now.prod.json
workflows:
  version: 2
  release:
    jobs:
      - deploy_frontend_staging
      - test_backend
      - deploy_prod:
          filters:
            branches:
              only: master
