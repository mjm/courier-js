version: 2
jobs:
  deploy_frontend_staging:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Install Now CLI
          command: sudo npm install -g --unsafe-perm now
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install NPM modules
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
#      - run:
#          name: Migrate database
#          command: env DATABASE_URL="$STAGING_DATABASE_URL" npx node-pg-migrate up
#      - run:
#          name: Update Auth0 configuration
#          command: npm run auth:import:staging
      - run:
          name: Deploy to Now
          command: now --token $NOW_TOKEN --prod --confirm

  test_backend:
    docker:
      - image: circleci/golang:1.13-node
      - image: circleci/postgres:12-alpine-ram
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: courier_test
    environment:
      DATABASE_URL: postgresql://localhost/courier_test?sslmode=disable
    steps:
      - checkout
      - run:
          name: Set up Bazel repository
          command: |
            sudo apt install curl
            curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -
            echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
      - run:
          name: Install packages
          command: sudo apt update && sudo apt install bazel postgresql-client
      - restore_cache:
          keys:
            - bazel-cache
      - run:
          name: Install golang-migrate
          command: |
            curl -L https://github.com/golang-migrate/migrate/releases/download/v4.8.0/migrate.linux-amd64.tar.gz | tar xvz
            mv migrate.linux-amd64 /go/bin/migrate
#      - run: go get github.com/jstemmer/go-junit-report
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run:
          name: Enable pgcrypto extension
          command: psql -c 'create extension pgcrypto;' $DATABASE_URL
      - run:
          name: Migrate test database
          command: |
            /go/bin/migrate -database "$DATABASE_URL" -path migrations/ up
      - run:
          name: Run unit tests
          command: bazel test --config=ci //...
      - run:
          name: Build functions
          command: bazel build --config=ci //cmd/courier-functions:courier-functions

      - save_cache:
          key: bazel-cache
          paths:
            - "/home/circleci/.bazel_cache"

      - store_test_results:
          path: bazel-testlogs

  push_image_staging:
    docker:
      - image: google/cloud-sdk
    environment:
      GOOGLE_PROJECT: courier-staging-267902
    steps:
      - checkout
      - run:
          name: Set up Bazel repository
          command: |
            apt install -y curl
            curl https://bazel.build/bazel-release.pub.gpg | apt-key add -
            echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | tee /etc/apt/sources.list.d/bazel.list
      - run:
          name: Install packages
          command: apt update && apt install -y bazel
      - run:
          name: Authenticate with Google Cloud
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT}
            gcloud --quiet auth configure-docker
      - restore_cache:
          keys:
            - bazel-cache
      - run:
          name: Build and Push Container
          command: bazel run --config=ci //image:courier-functions-push
      - save_cache:
          key: bazel-cache
          paths:
            - "/home/circleci/.bazel_cache"

  deploy_backend_staging:
    docker:
      - image: hashicorp/terraform:0.12.20
    environment:
      TF_INPUT: "false"
      TF_IN_AUTOMATION: "true"
      TF_WORKSPACE: staging-us-central1
    steps:
      - checkout
      - run:
          name: Configure Terraform
          command: |
            printf "credentials \"app.terraform.io\" {\n  token = \"%s\"\n}\n" "$TF_TOKEN" > ~/.terraformrc

            cd terraform/gcp
            echo "function_revision = \"$CIRCLE_SHA1\"" > revision.auto.tfvars
            echo "revision.auto.tfvars:"
            cat revision.auto.tfvars
      - run:
          name: terraform init
          command: cd terraform/gcp && terraform init
      - run:
          name: terraform apply
          command: cd terraform/gcp && terraform apply -auto-approve

  deploy_prod:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Install Now CLI
          command: sudo npm install -g --unsafe-perm now
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install NPM modules
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Migrate database
          command: env DATABASE_URL="$PROD_DATABASE_URL" npx node-pg-migrate up
      - run:
          name: Update Auth0 configuration
          command: npm run auth:import:prod
      - run:
          name: Deploy to Now
          command: now --token $NOW_TOKEN --prod -A now.prod.json
workflows:
  version: 2
  release:
    jobs:
      - test_backend
      - deploy_frontend_staging:
          requires:
            - test_backend
      - push_image_staging:
          requires:
            - test_backend
      - deploy_backend_staging:
          requires:
            - test_backend
      - deploy_prod:
          filters:
            branches:
              only: master
