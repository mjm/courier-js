version: 2.1

executors:
  node:
    docker:
      - image: circleci/node:12
  bazel:
    parameters:
      project:
        description: Google Cloud Project ID
        type: string
    docker:
      - image: mmoriarity/circleci-bazel
      - image: circleci/postgres:12-alpine-ram
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: courier_test
    environment:
      DATABASE_URL: postgresql://localhost/courier_test?sslmode=disable
      GOOGLE_PROJECT: << parameters.project >>
  terraform:
    parameters:
      workspace:
        type: string
    docker:
      - image: hashicorp/terraform:0.12.20
    environment:
      TF_INPUT: "false"
      TF_IN_AUTOMATION: "true"
      TF_WORKSPACE: << parameters.workspace >>

jobs:
  build_and_test_backend:
    parameters:
      project:
        type: string
      credentials:
        type: env_var_name
    executor:
      name: bazel
      project: << parameters.project >>
    steps:
      - checkout
      - run:
          name: Set up GCP credentials
          command: |
            echo $<< parameters.credentials >> > /tmp/gcp-credentials.json
            gcloud auth activate-service-account --key-file=/tmp/gcp-credentials.json
            gcloud --quiet config set project ${GOOGLE_PROJECT}
            gcloud --quiet auth configure-docker

            # Use production credentials for build cache, regardless
            echo $PROD_GCLOUD_SERVICE_KEY > /tmp/gcp-credentials.json
      - run:
          name: Install golang-migrate
          command: |
            curl -L https://github.com/golang-migrate/migrate/releases/download/v4.8.0/migrate.linux-amd64.tar.gz | tar xvz
            sudo mv migrate.linux-amd64 /usr/local/bin/migrate
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run:
          name: Enable pgcrypto extension
          command: psql -c 'create extension pgcrypto;' $DATABASE_URL
      - run:
          name: Migrate test database
          command: /usr/local/bin/migrate -database "$DATABASE_URL" -path migrations/ up
      - run:
          name: Run unit tests
          command: bazel test --config=ci //...
      - run:
          name: Copy test results
          command: mkdir /tmp/test-results && cp -r bazel-testlogs/* /tmp/test-results/
      - store_test_results:
          path: /tmp/test-results
      - run:
          name: Build container image
          command: bazel build --config=ci //image:courier-functions
      - run:
          name: Push functions container image
          command: bazel run --config=ci //image:courier-functions-push

  deploy_frontend:
    parameters:
      now_config_file:
        type: string
    executor: node
    steps:
      - checkout
      - run:
          name: Install Now CLI
          command: sudo npm install -g --unsafe-perm now
      - run:
          name: Deploy to Now
          command: now --token $NOW_TOKEN --prod -A '<< parameters.now_config_file >>' --confirm

  update_auth0:
    parameters:
      env:
        type: string
    executor: node
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install NPM modules
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Update Auth0 configuration
          command: npm run auth:import:<< parameters.env >>

  migrate_database:
    parameters:
      database_url:
        type: env_var_name
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - run:
          name: Install golang-migrate
          command: |
            curl -L https://github.com/golang-migrate/migrate/releases/download/v4.8.0/migrate.linux-amd64.tar.gz | tar xvz
            sudo mv migrate.linux-amd64 /usr/local/bin/migrate
      - run:
          name: Migrate database
          command: /usr/local/bin/migrate -database "$<< parameters.database_url >>" -path migrations/ up

  deploy_backend:
    parameters:
      workspace:
        type: string
    executor:
      name: terraform
      workspace: << parameters.workspace >>
    steps:
      - checkout
      - run:
          name: Configure Terraform
          command: |
            printf "credentials \"app.terraform.io\" {\n  token = \"%s\"\n}\n" "$TF_TOKEN" > ~/.terraformrc

            cd terraform/gcp
            echo "function_revision = \"$CIRCLE_SHA1\"" > revision.auto.tfvars
            echo "revision.auto.tfvars:"
            cat revision.auto.tfvars
      - run:
          name: terraform init
          command: cd terraform/gcp && terraform init
      - run:
          name: terraform apply
          command: cd terraform/gcp && terraform apply -auto-approve

workflows:
  version: 2
  release:
    jobs:
      - build_and_test_backend:
          name: build_and_test_backend_staging
          project: courier-staging-267902
          credentials: GCLOUD_SERVICE_KEY
      - migrate_database:
          name: migrate_database_staging
          database_url: STAGING_DATABASE_URL
          requires:
            - build_and_test_backend_staging
      - update_auth0:
          name: update_auth0_staging
          env: staging
          requires:
            - build_and_test_backend_staging
      - deploy_frontend:
          name: deploy_frontend_staging
          now_config_file: now.json
          requires:
            - build_and_test_backend_staging
            - migrate_database_staging
            - update_auth0_staging
      - deploy_backend:
          name: deploy_backend_staging
          workspace: staging-us-central1
          requires:
            - build_and_test_backend_staging
            - migrate_database_staging
            - update_auth0_staging

      - build_and_test_backend:
          name: build_and_test_backend_prod
          project: courier-prod-269822
          credentials: PROD_GCLOUD_SERVICE_KEY
          requires:
            # run the staging one first so we can rely on its build cache
            - build_and_test_backend_staging
          filters:
            branches:
              only: master
      - migrate_database:
          name: migrate_database_prod
          database_url: PROD_DATABASE_URL
          requires:
            - build_and_test_backend_prod
      - update_auth0:
          name: update_auth0_prod
          env: prod
          requires:
            - build_and_test_backend_prod
      - deploy_frontend:
          name: deploy_frontend_prod
          now_config_file: now.prod.json
          requires:
            - build_and_test_backend_prod
            - migrate_database_prod
            - update_auth0_prod
      - deploy_backend:
          name: deploy_backend_prod
          workspace: production-us-central1
          requires:
            - build_and_test_backend_prod
            - migrate_database_prod
            - update_auth0_prod
