version: 2.1

executors:
  node:
    docker:
      - image: circleci/node:12
  bazel:
    parameters:
      bucket:
        description: S3 bucket for Lambda deployment packages
        type: string
    docker:
      - image: mmoriarity/circleci-bazel
      - image: circleci/dynamodb:15
    environment:
      LAMBDA_BUCKET: << parameters.bucket >>
  terraform:
    parameters:
      workspace:
        type: string
    docker:
      - image: hashicorp/terraform:0.12.24
    environment:
      TF_INPUT: "false"
      TF_IN_AUTOMATION: "true"
      TF_WORKSPACE: << parameters.workspace >>

jobs:
  build_and_test_backend:
    parameters:
      bucket:
        type: string
      aws_access_key_id:
        description: Env var name for access key ID
        type: env_var_name
        default: AWS_ACCESS_KEY_ID
      aws_secret_access_key:
        description: Env var name of secret access key
        type: env_var_name
        default: AWS_SECRET_ACCESS_KEY
    executor:
      name: bazel
      bucket: << parameters.bucket >>
    steps:
      - checkout
      - run:
          name: Set up env vars
          command: |
            echo 'export AWS_ACCESS_KEY_ID=$<< parameters.aws_access_key_id >>' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY=$<< parameters.aws_secret_access_key >>' >> $BASH_ENV
      - run:
          name: Set up build cache credentials
          command: |
            # Use production credentials for build cache
            echo $PROD_GCLOUD_SERVICE_KEY > /tmp/gcp-credentials.json
      - run:
          name: Run unit tests
          command: bazel test --config=ci //...
      - run:
          name: Copy test results
          command: mkdir /tmp/test-results && cp -r bazel-testlogs/* /tmp/test-results/
      - store_test_results:
          path: /tmp/test-results
      - run:
          name: Upload Lambda functions
          command: bazel run --config=ci //:upload_functions

  deploy_frontend:
    parameters:
      now_config_file:
        type: string
    executor: node
    steps:
      - checkout
      - run:
          name: Install Now CLI
          command: sudo npm install -g --unsafe-perm now
      - run:
          name: Deploy to Now
          command: now --token $NOW_TOKEN --prod -A '<< parameters.now_config_file >>' --confirm

  update_auth0:
    parameters:
      env:
        type: string
    executor:
      name: terraform
      workspace: << parameters.env >>-auth0
    steps:
      - checkout
      - run:
          name: Configure Terraform
          command: |
            printf "credentials \"app.terraform.io\" {\n  token = \"%s\"\n}\n" "$TF_TOKEN" > ~/.terraformrc
      - run:
          name: terraform init
          command: cd terraform/auth0 && terraform init
      - run:
          name: terraform apply
          command: cd terraform/auth0 && terraform apply -auto-approve

  deploy_backend_aws:
    parameters:
      workspace:
        type: string
    executor:
      name: terraform
      workspace: << parameters.workspace >>
    steps:
      - checkout
      - run:
          name: Configure Terraform
          command: |
            printf "credentials \"app.terraform.io\" {\n  token = \"%s\"\n}\n" "$TF_TOKEN" > ~/.terraformrc

            cd terraform/aws
            echo "function_revision = \"$CIRCLE_SHA1\"" > revision.auto.tfvars
            echo "revision.auto.tfvars:"
            cat revision.auto.tfvars
      - run:
          name: terraform init
          command: cd terraform/aws && terraform init
      - run:
          name: terraform apply
          command: cd terraform/aws && terraform apply -auto-approve

  mark_deploy:
    parameters:
      dataset:
        type: string
    docker:
      - image: cimg/base:2020.01
    steps:
      - run:
          name: Create Honeycomb marker
          command: |
            curl https://api.honeycomb.io/1/markers/<< parameters.dataset >> \
              -X POST \
              -H "X-Honeycomb-Team: $HONEY_WRITE_KEY" \
              -d "{\"message\":\"Deploy $CIRCLE_BUILD_NUM\", \"type\":\"deploy\", \"url\": \"$CIRCLE_BUILD_URL\"}"

workflows:
  version: 2
  release:
    jobs:
      - build_and_test_backend:
          bucket: courier-production-handlers
          aws_access_key_id: PROD_AWS_ACCESS_KEY_ID
          aws_secret_access_key: PROD_AWS_SECRET_ACCESS_KEY

      - update_auth0:
          name: update_auth0_staging
          env: staging
          requires:
            - build_and_test_backend
      - deploy_frontend:
          name: deploy_frontend_staging
          now_config_file: now.json
          requires:
            - build_and_test_backend
      - deploy_backend_aws:
          name: deploy_backend_staging
          workspace: staging-us-east-2
          requires:
            - build_and_test_backend
      - mark_deploy:
          name: mark_deploy_staging
          dataset: courier-staging
          requires:
            - update_auth0_staging
            - deploy_backend_staging

      - update_auth0:
          name: update_auth0_prod
          env: production
          requires:
            - build_and_test_backend
          filters:
            branches:
              only: master
      - deploy_frontend:
          name: deploy_frontend_prod
          now_config_file: now.prod.json
          requires:
            - build_and_test_backend
          filters:
            branches:
              only: master
      - deploy_backend_aws:
          name: deploy_backend_prod
          workspace: production-us-east-2
          requires:
            - build_and_test_backend
          filters:
            branches:
              only: master
      - mark_deploy:
          name: mark_deploy_prod
          dataset: courier
          requires:
            - update_auth0_prod
            - deploy_backend_prod
