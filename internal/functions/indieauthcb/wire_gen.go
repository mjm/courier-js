// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package indieauthcb

import (
	"github.com/mjm/courier-js/internal/auth"
	"github.com/mjm/courier-js/internal/billing"
	"github.com/mjm/courier-js/internal/db"
	"github.com/mjm/courier-js/internal/event"
	"github.com/mjm/courier-js/internal/secret"
	"github.com/mjm/courier-js/internal/tasks"
	"github.com/mjm/courier-js/internal/trace"
	"github.com/mjm/courier-js/internal/write"
	"github.com/mjm/courier-js/internal/write/tweets"
)

// Injectors from wire.go:

func InitializeHandler(gcpConfig secret.GCPConfig) (*Handler, error) {
	client, err := secret.NewSecretManager(gcpConfig)
	if err != nil {
		return nil, err
	}
	gcpSecretKeeper := secret.NewGCPSecretKeeper(gcpConfig, client)
	config, err := trace.NewConfigFromSecrets(gcpSecretKeeper)
	if err != nil {
		return nil, err
	}
	commandBus := write.NewCommandBus()
	authConfig, err := auth.NewConfigFromSecrets(gcpSecretKeeper)
	if err != nil {
		return nil, err
	}
	management, err := auth.NewManagementClient(authConfig)
	if err != nil {
		return nil, err
	}
	jwksClient := auth.NewJWKSClient(authConfig)
	authenticator := auth.NewAuthenticator(authConfig, management, jwksClient)
	bus := event.NewBus()
	tasksConfig := tasks.NewConfig()
	tasksTasks, err := tasks.New(tasksConfig, gcpConfig)
	if err != nil {
		return nil, err
	}
	dbConfig, err := db.NewConfigFromSecrets(gcpSecretKeeper)
	if err != nil {
		return nil, err
	}
	dbDB, err := db.New(dbConfig)
	if err != nil {
		return nil, err
	}
	tweetRepository := tweets.NewTweetRepository(dbDB)
	feedSubscriptionRepository := tweets.NewFeedSubscriptionRepository(dbDB)
	postRepository := tweets.NewPostRepository(dbDB)
	twitterConfig, err := tweets.NewTwitterConfigFromSecrets(gcpSecretKeeper)
	if err != nil {
		return nil, err
	}
	externalTweetRepository := tweets.NewExternalTweetRepository(authConfig, twitterConfig)
	keyManagementClient, err := tweets.NewKeyManagementClient(gcpConfig)
	if err != nil {
		return nil, err
	}
	billingConfig, err := billing.NewConfigFromSecrets(gcpSecretKeeper)
	if err != nil {
		return nil, err
	}
	api := billing.NewClient(billingConfig)
	userRepository := tweets.NewUserRepository(management, keyManagementClient, gcpConfig, api)
	commandHandler := tweets.NewCommandHandler(commandBus, bus, tasksTasks, tweetRepository, feedSubscriptionRepository, postRepository, externalTweetRepository, userRepository)
	handler := NewHandler(config, commandBus, authenticator, commandHandler)
	return handler, nil
}
