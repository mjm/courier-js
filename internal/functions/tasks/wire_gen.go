// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package tasks

import (
	"github.com/jonboulle/clockwork"
	"github.com/mjm/courier-js/internal/auth"
	"github.com/mjm/courier-js/internal/billing"
	"github.com/mjm/courier-js/internal/config"
	"github.com/mjm/courier-js/internal/db"
	"github.com/mjm/courier-js/internal/event"
	"github.com/mjm/courier-js/internal/secret"
	"github.com/mjm/courier-js/internal/tasks"
	"github.com/mjm/courier-js/internal/write"
	"github.com/mjm/courier-js/internal/write/feeds"
	"github.com/mjm/courier-js/internal/write/shared"
	"github.com/mjm/courier-js/internal/write/tweets"
)

// Injectors from wire.go:

func InitializeHandler(gcpConfig secret.GCPConfig) (*Handler, error) {
	commandBus := write.NewCommandBus()
	defaultEnv := &config.DefaultEnv{}
	client, err := secret.NewSecretManager(gcpConfig)
	if err != nil {
		return nil, err
	}
	gcpSecretKeeper := secret.NewGCPSecretKeeper(gcpConfig, client)
	loader := config.NewLoader(defaultEnv, gcpSecretKeeper)
	publisherConfig, err := event.NewPublisherConfig(loader)
	if err != nil {
		return nil, err
	}
	pubsubClient, err := event.NewPubSubClient(gcpConfig)
	if err != nil {
		return nil, err
	}
	publisher := event.NewPublisher(publisherConfig, pubsubClient)
	tasksConfig, err := tasks.NewConfig(loader)
	if err != nil {
		return nil, err
	}
	tasksTasks, err := tasks.New(tasksConfig, gcpConfig)
	if err != nil {
		return nil, err
	}
	dbConfig, err := db.NewConfig(loader)
	if err != nil {
		return nil, err
	}
	dbDB, err := db.New(dbConfig)
	if err != nil {
		return nil, err
	}
	tweetRepository := tweets.NewTweetRepository(dbDB)
	feedSubscriptionRepository := tweets.NewFeedSubscriptionRepository(dbDB)
	postRepository := tweets.NewPostRepository(dbDB)
	authConfig, err := auth.NewConfig(loader)
	if err != nil {
		return nil, err
	}
	twitterConfig, err := tweets.NewTwitterConfig(loader)
	if err != nil {
		return nil, err
	}
	externalTweetRepository := tweets.NewExternalTweetRepository(authConfig, twitterConfig)
	management, err := auth.NewManagementClient(authConfig)
	if err != nil {
		return nil, err
	}
	keyManagementClient, err := tweets.NewKeyManagementClient(gcpConfig)
	if err != nil {
		return nil, err
	}
	billingConfig, err := billing.NewConfig(loader)
	if err != nil {
		return nil, err
	}
	api := billing.NewClient(billingConfig)
	userRepository := tweets.NewUserRepository(management, keyManagementClient, gcpConfig, api)
	dynamoConfig, err := db.NewDynamoConfig(loader)
	if err != nil {
		return nil, err
	}
	dynamoDB, err := db.NewDynamoDB(dynamoConfig)
	if err != nil {
		return nil, err
	}
	clock := clockwork.NewRealClock()
	feedRepository := shared.NewFeedRepository(dynamoDB, dynamoConfig, clock)
	sharedTweetRepository := shared.NewTweetRepository(dynamoDB, dynamoConfig, clock)
	commandHandler := tweets.NewCommandHandler(commandBus, publisher, tasksTasks, tweetRepository, feedSubscriptionRepository, postRepository, externalTweetRepository, userRepository, feedRepository, sharedTweetRepository)
	feedsFeedRepository := feeds.NewFeedRepository(dbDB)
	subscriptionRepository := feeds.NewSubscriptionRepository(dbDB)
	sharedPostRepository := shared.NewPostRepository(dynamoDB, dynamoConfig, clock)
	feedsCommandHandler := feeds.NewCommandHandler(commandBus, publisher, tasksTasks, feedsFeedRepository, subscriptionRepository, feedRepository, sharedPostRepository)
	handler := NewHandler(commandBus, commandHandler, feedsCommandHandler)
	return handler, nil
}
